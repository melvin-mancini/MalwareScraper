import axios from "axios";
import fs from "fs"
import Path from "path"
import {config} from "./config"
var archiver = require('archiver');
import rimraf from "rimraf"

archiver.registerFormat('zip-encryptable', require('archiver-zip-encryptable'));


export async function downloadFile(url, fileName, passwd) : Promise<boolean>{
    return new Promise<boolean>(async (resolve, reject) => {
        if (!fs.existsSync(config.DEST_FOLDER) ) {
            fs.mkdirSync(config.DEST_FOLDER);
        }
        
        const response = await getArrayBuffer(url)
        if( response )
        {
            try{
                const malwareZipPath = Path.resolve(__dirname, config.DEST_FOLDER, cleanName(fileName) + '.zip' );
                const malwareFilePath = Path.resolve(__dirname, config.DEST_FOLDER, cleanName(fileName) );

                let malwareWriteStream = fs.createWriteStream(malwareZipPath);
                let malwareWriteFile = fs.createWriteStream(malwareFilePath)

                response.data.pipe(malwareWriteFile)

                let archive = archiver('zip-encryptable', {
                    zlib: '9',
                    forceLocalTime: true,
                    encryptionMethod: 'aes256',
                    password: passwd
                });
                
                archive.pipe(malwareWriteStream);
                archive.file(malwareFilePath, { name: cleanName(fileName)} )
                archive.finalize()

                malwareWriteStream.on('finish', () => {
                    rimraf.sync(malwareFilePath);
                    resolve(false)
                });

                malwareWriteStream.on('error', () => {
                    console.log("Error while file saving: ", fileName);
                    resolve(true);
                })

            }
            catch(error){
                console.log("Error while saving the file", error)
                resolve(true)
            }
        }
        else{
            resolve(true)
        }
    })
}


export async function getArrayBuffer(url){
    try {
        const response = await axios({
            url,
            method: 'GET',
            responseType: 'stream',
        })
        return response;
    }
    catch( error ) {
        return false;
    }
}

export function getTimestamp() : number{
    return Math.floor(new Date().getTime() / 1000);
}

export function cleanName(nameString: string) : string {
    return nameString.replace("/", ".");
}

export function generatePassword() : string{
    return Math.random().toString(36).slice(-8);
}

