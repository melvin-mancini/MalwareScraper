"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrape = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const config_1 = require("./config");
const utils = __importStar(require("./utils"));
const redis_1 = require("./redis");
const malwareModel_1 = require("./malwareModel");
function scrape() {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            axios_1.default.get(config_1.config.ENDPOINT)
                .then((response) => __awaiter(this, void 0, void 0, function* () {
                if (!axios_1.default.isAxiosError(response)) {
                    try {
                        yield scrapePage(response);
                        resolve(true);
                    }
                    catch (error) {
                        reject(false);
                    }
                }
            }))
                .catch((error) => {
                console.log("Error during GET request: " + error);
                reject(false);
            });
        });
    });
}
exports.scrape = scrape;
function scrapePage(response) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const html = response.data; // Get the HTML from the HTTP request
            const $ = cheerio_1.default.load(html);
            const redis = new redis_1.Redis();
            let malwareAnalyzed = 0;
            let promises = $("table > tbody > tr").map((index, element) => __awaiter(this, void 0, void 0, function* () {
                let sha = $($(element).find("td")[2]).text();
                let malwareExists = yield redis.malwareExists(sha);
                if (index > 0 && !malwareExists) {
                    malwareAnalyzed++;
                    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                        try {
                            yield parsePage($, element, redis);
                            resolve(true);
                        }
                        catch (error) {
                            reject(false);
                        }
                    }));
                }
            }));
            try {
                yield Promise.allSettled(promises);
                yield redis.insertMalwareAnalized(utils.getTimestamp(), malwareAnalyzed);
                resolve(true);
            }
            catch (error) {
                reject(false);
            }
        }));
    });
}
function parsePage($, element, redis) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let sha = $($(element).find("td")[2]).text();
            let threatName = $($(element).find("td")[0]).text();
            let linkDownload = $($(element).find("td")[1]).find('a').attr('href');
            let password = utils.generatePassword();
            let localPath = config_1.config.DEST_FOLDER;
            let downloadError = yield utils.downloadFile(linkDownload, threatName, password);
            let malwareObj = new malwareModel_1.Malware(threatName, sha, localPath, password, downloadError);
            console.log(malwareObj);
            yield redis.insertMalware(malwareObj);
            return true;
        }
        catch (error) {
            return false;
        }
    });
}
//# sourceMappingURL=scraper.js.map