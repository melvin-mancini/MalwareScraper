"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePassword = exports.cleanName = exports.getTimestamp = exports.getArrayBuffer = exports.downloadFile = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const config_1 = require("./config");
var archiver = require('archiver');
const rimraf_1 = __importDefault(require("rimraf"));
archiver.registerFormat('zip-encryptable', require('archiver-zip-encryptable'));
function downloadFile(url, fileName, passwd) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (!fs_1.default.existsSync(config_1.config.DEST_FOLDER)) {
                fs_1.default.mkdirSync(config_1.config.DEST_FOLDER);
            }
            const response = yield getArrayBuffer(url);
            if (response) {
                try {
                    const malwareZipPath = path_1.default.resolve(__dirname, config_1.config.DEST_FOLDER, cleanName(fileName) + '.zip');
                    const malwareFilePath = path_1.default.resolve(__dirname, config_1.config.DEST_FOLDER, cleanName(fileName));
                    let malwareWriteStream = fs_1.default.createWriteStream(malwareZipPath);
                    let malwareWriteFile = fs_1.default.createWriteStream(malwareFilePath);
                    response.data.pipe(malwareWriteFile);
                    let archive = archiver('zip-encryptable', {
                        zlib: '9',
                        forceLocalTime: true,
                        encryptionMethod: 'aes256',
                        password: passwd
                    });
                    archive.pipe(malwareWriteStream);
                    archive.file(malwareFilePath, { name: cleanName(fileName) });
                    archive.finalize();
                    malwareWriteStream.on('finish', () => {
                        rimraf_1.default.sync(malwareFilePath);
                        resolve(false);
                    });
                    malwareWriteStream.on('error', () => {
                        console.log("Error while file saving: ", fileName);
                        resolve(true);
                    });
                }
                catch (error) {
                    console.log("Error while saving the file", error);
                    resolve(true);
                }
            }
            else {
                resolve(true);
            }
        }));
    });
}
exports.downloadFile = downloadFile;
function getArrayBuffer(url) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield axios_1.default({
                url,
                method: 'GET',
                responseType: 'stream',
            });
            return response;
        }
        catch (error) {
            return false;
        }
    });
}
exports.getArrayBuffer = getArrayBuffer;
function getTimestamp() {
    return Math.floor(new Date().getTime() / 1000);
}
exports.getTimestamp = getTimestamp;
function cleanName(nameString) {
    return nameString.replace("/", ".");
}
exports.cleanName = cleanName;
function generatePassword() {
    return Math.random().toString(36).slice(-8);
}
exports.generatePassword = generatePassword;
//# sourceMappingURL=utils.js.map