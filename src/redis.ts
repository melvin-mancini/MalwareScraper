import redis from 'redis';
import {config} from './config'
import { promisifyAll } from 'bluebird';
import type { RedisClient } from "redis";
import { Malware } from './malwareModel';

promisifyAll(redis);

declare module "redis" {

    export interface RedisClient extends NodeJS.EventEmitter {
        setAsync(key: string, value: string): Promise<void>;
        getAsync(key: string): Promise<string>;
        hexistsAsync(key: string, value: string): Promise<boolean>;
        hsetAsync(key: string, hashKey: string, value: string): Promise<void>
        hdelAsync(key: string, value: string): Promise<boolean>
    }

}

class Redis {
    private clientRedis: RedisClient;

    constructor() {
        this.clientRedis = redis.createClient();
    }

    async malwareExists(hash: string) {
        return await this.clientRedis.hexistsAsync(config.MALWARE_KEY, hash);
    }

    async insertMalware(malwareObj: Malware) {
        return await this.clientRedis.hsetAsync(config.MALWARE_KEY, malwareObj.sha, JSON.stringify(malwareObj));
    }

    async insertMalwareAnalized(timestamp: number, count: number){
        return await this.clientRedis.hsetAsync(config.MALWARE_ANALIZED_KEY, timestamp.toString(), count.toString());
    }

    async deleteMalware(hash: string){
            return await this.clientRedis.hdelAsync(config.MALWARE_KEY, hash);;
    }
}

export { Redis }